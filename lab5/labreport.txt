код моделирует систему распределения задач между процессами в параллельной среде с использованием алгоритма балансировки нагрузки.

каждый процесс имеет свою очередь задач, доступ к которой - с помощью класса SafeQueue 

есть 2 потока: 
    для обработки сообщений - messageThread
    для выполнения задач - executingThread

порядок действий: 
    1 каждый процесс инициализирует свою очередь задач с помощью refillTaskList, заполняя его определенным количеством задач
    2 поток executingThread извлекает задачи из очереди и выполняет их
    3 балансировка нагрузки: 
        если включен флаг BALANCE, то каждый процесс запрашивает задачи у других процессов, 
            отправляя им сообщения с номером своего процесса (флаг сейчас включен)
        процессы, получающие запросы, проверяют, есть ли у них избыточные задачи, 
            и отправляют их запрашивающему процессу, опять же если таковые имеются.
        Процесс, получивший задачи (изначально их просил), добавляет их в свою очередь и их выполняет.

    4 це кинец
        каждый процесс, завершив выполнение своих задач, отправляет сообщение FINISHED всем остальным
        поток messageThread каждого процесса слушает сообщения от других процессов, в том числе FINISHED.
        когда поток messageThread получает сообщение FINISHED от всех других процессов, он устанавливает флаг finishFlag в true и 
            прекращает свою работу. 
            Поток executingThread тоже прекращает свою работу, когда получает finishFlag в true.

порядок действий у конкретного процесса (то же что и выше но только от лица процесса): 
    1 инициализирует свою очередь и потоки.
    2 выполняет задачи из своей очереди с помощью потока executingThread
    3 балансировка:
        периодически отправляет запросы на задачи другим процессам
        получает задачи от других процессов, если они доступны
    4 после завершения всех задач отправляет сообщение FINISHED всем другим процессам.

